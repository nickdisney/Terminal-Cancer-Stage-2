import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, GlobalAveragePooling1D, Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import numpy as np

# Load the dataset
df = pd.read_csv('your_dataset.csv')
prompts = df['prompt'].values
labels = df['label'].values

# Encode the labels
label_encoder = LabelEncoder()
encoded_labels = label_encoder.fit_transform(labels)
labels_categorical = tf.keras.utils.to_categorical(encoded_labels)

# Tokenize and pad the prompts
tokenizer = Tokenizer(num_words=10000, oov_token="<OOV>")
tokenizer.fit_on_texts(prompts)
sequences = tokenizer.texts_to_sequences(prompts)
padded_sequences = pad_sequences(sequences, maxlen=100, padding='post')

# Split the data
X_train, X_test, y_train, y_test = train_test_split(padded_sequences, labels_categorical, test_size=0.2, random_state=42)

# Model definition
model = Sequential([
    Embedding(10000, 16, input_length=100),
    GlobalAveragePooling1D(),
    Dense(24, activation='relu'),
    Dense(len(np.unique(encoded_labels)), activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Model training
model.fit(X_train, y_train, epochs=30, validation_data=(X_test, y_test), verbose=2)

# Save the model and tokenizer
model.save('prompt_classification_model')
with open('tokenizer.json', 'w') as f:
    f.write(tokenizer.to_json())
